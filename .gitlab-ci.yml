image: docker:stable

stages:
  - build
  - deploy
  - import_data

variables:
  CLIENT_IMAGE_NAME: $CI_REGISTRY_IMAGE/bhht-client:$CI_COMMIT_REF_SLUG
  API_IMAGE_NAME: $CI_REGISTRY_IMAGE/bhht-api:$CI_COMMIT_REF_SLUG
  DOCKER_HOST: tcp://127.0.0.1:2375
  DOCKER_TLS_CERTDIR: ""

services:
    - docker:stable-dind

build_client:
  stage: build
  script:
    - docker build -t $CLIENT_IMAGE_NAME -f ./client/Dockerfile .
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push $CLIENT_IMAGE_NAME
  only:
    - master
    - staging
    - prod
    - tags

build_api:
  stage: build
  script:
    - docker build -t $API_IMAGE_NAME -f Dockerfile .
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push $API_IMAGE_NAME
  only:
    - master
    - staging
    - prod
    - tags

deploy:
  image:
    name: jrisp/kubehelper:latest
    entrypoint: [""]
  stage: deploy
  dependencies:
    - build_client
    - build_api
  script:
    - NS=bhht
    - kubectl config set-cluster k8s --server="$KUBE_URL" --certificate-authority="$KUBE_CA_PEM_FILE"
    - kubectl config set-credentials gitlab-admin --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster=k8s --user=gitlab-admin
    - kubectl config use-context default
    - kubectl apply -f k8s/namespace.yml
    - cp ${HTPASSWD_SECRETS} k8s/overlays/$CI_COMMIT_REF_SLUG/htpasswd.secret
    - kubectl apply -k k8s/overlays/$CI_COMMIT_REF_SLUG
    - kubectl -n ${NS} rollout restart deployment ${NS}-api
    - kubectl -n ${NS} rollout restart deployment ${NS}-client
  environment:
    name: $CI_COMMIT_REF_SLUG
  only:
   - staging
   - prod

import_data:
  image:
    name: jrisp/kubehelper:latest
    entrypoint: [""]
  stage: import_data
  variables:
    GIT_STRATEGY: none
  environment:
    name: $CI_COMMIT_REF_SLUG
  script:
    - NS=bhht
    - POD_API=$(kubectl -n ${NS} get pod --selector component=api  --field-selector status.phase=Running  --output jsonpath="{.items[0].metadata.name}")
    - POD_INDEX=$(kubectl -n ${NS} get pod --selector component=index  --field-selector status.phase=Running  --output jsonpath="{.items[0].metadata.name}")
    - kubectl -n ${NS} exec ${POD_API} -- wget ftp://${FTP_USER}:${FTP_PASSWORD}@${FTP_HOST}${FTP_PATH}/base1_individus.csv -O /tmp/base1_individus.csv
    - kubectl -n ${NS} exec ${POD_API} -- wget ftp://${FTP_USER}:${FTP_PASSWORD}@${FTP_HOST}${FTP_PATH}/base2_locations_mined.csv -O /tmp/base2_locations_mined.csv
    - kubectl -n ${NS} exec ${POD_API} -- wget ftp://${FTP_USER}:${FTP_PASSWORD}@${FTP_HOST}${FTP_PATH}/base3_trajectoires_mined.csv -O /tmp/base3_trajectoires_mined.csv
    - kubectl -n ${NS} exec ${POD_INDEX} -- curl -X DELETE "http://localhost:9200/_all"
    - kubectl -n ${NS} exec ${POD_API} -- npm run build:indices -- -b /tmp && rm -f /tmp/base1_individus.csv /tmp/base2_locations_mined.csv /tmp/base3_trajectoires_mined.csv
  when: manual
  only:
    - staging
    - prod
